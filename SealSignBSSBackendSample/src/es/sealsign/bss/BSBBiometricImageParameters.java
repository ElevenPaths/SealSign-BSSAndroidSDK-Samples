package es.sealsign.bss;

//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 4.1.7.0
//
// Created by Quasar Development at 15-06-2015
//
//---------------------------------------------------


import java.util.Hashtable;
import org.ksoap2.serialization.*;

public class BSBBiometricImageParameters extends AttributeContainer implements KvmSerializable
{
    
    public String attachmentName;
    
    public Boolean autoSize=false;
    
    public Integer height=0;
    
    public String imageTokenText;
    
    public Integer offsetX=0;
    
    public Integer offsetY=0;
    
    public Boolean onAllPages=false;
    
    public Boolean onLastPage=false;
    
    public Integer onPage=0;
    
    public Integer pageOffset=0;
    
    public Integer rotate=0;
    
    public Boolean signatureVisible=false;
    
    public Integer width=0;

    public BSBBiometricImageParameters ()
    {
    }

    public BSBBiometricImageParameters (java.lang.Object paramObj,BSBExtendedSoapSerializationEnvelope __envelope)
    {
	    
	    if (paramObj == null)
            return;
        AttributeContainer inObj=(AttributeContainer)paramObj;


        SoapObject soapObject=(SoapObject)inObj;  
        if (soapObject.hasProperty("attachmentName"))
        {	
	        java.lang.Object obj = soapObject.getProperty("attachmentName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class))
            {
                SoapPrimitive j =(SoapPrimitive) obj;
                if(j.toString()!=null)
                {
                    this.attachmentName = j.toString();
                }
	        }
	        else if (obj!= null && obj instanceof String){
                this.attachmentName = (String)obj;
            }    
        }
        if (soapObject.hasProperty("autoSize"))
        {	
	        java.lang.Object obj = soapObject.getProperty("autoSize");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class))
            {
                SoapPrimitive j =(SoapPrimitive) obj;
                if(j.toString()!=null)
                {
                    this.autoSize = new Boolean(j.toString());
                }
	        }
	        else if (obj!= null && obj instanceof Boolean){
                this.autoSize = (Boolean)obj;
            }    
        }
        if (soapObject.hasProperty("height"))
        {	
	        java.lang.Object obj = soapObject.getProperty("height");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class))
            {
                SoapPrimitive j =(SoapPrimitive) obj;
                if(j.toString()!=null)
                {
                    this.height = Integer.parseInt(j.toString());
                }
	        }
	        else if (obj!= null && obj instanceof Integer){
                this.height = (Integer)obj;
            }    
        }
        if (soapObject.hasProperty("imageTokenText"))
        {	
	        java.lang.Object obj = soapObject.getProperty("imageTokenText");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class))
            {
                SoapPrimitive j =(SoapPrimitive) obj;
                if(j.toString()!=null)
                {
                    this.imageTokenText = j.toString();
                }
	        }
	        else if (obj!= null && obj instanceof String){
                this.imageTokenText = (String)obj;
            }    
        }
        if (soapObject.hasProperty("offsetX"))
        {	
	        java.lang.Object obj = soapObject.getProperty("offsetX");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class))
            {
                SoapPrimitive j =(SoapPrimitive) obj;
                if(j.toString()!=null)
                {
                    this.offsetX = Integer.parseInt(j.toString());
                }
	        }
	        else if (obj!= null && obj instanceof Integer){
                this.offsetX = (Integer)obj;
            }    
        }
        if (soapObject.hasProperty("offsetY"))
        {	
	        java.lang.Object obj = soapObject.getProperty("offsetY");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class))
            {
                SoapPrimitive j =(SoapPrimitive) obj;
                if(j.toString()!=null)
                {
                    this.offsetY = Integer.parseInt(j.toString());
                }
	        }
	        else if (obj!= null && obj instanceof Integer){
                this.offsetY = (Integer)obj;
            }    
        }
        if (soapObject.hasProperty("onAllPages"))
        {	
	        java.lang.Object obj = soapObject.getProperty("onAllPages");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class))
            {
                SoapPrimitive j =(SoapPrimitive) obj;
                if(j.toString()!=null)
                {
                    this.onAllPages = new Boolean(j.toString());
                }
	        }
	        else if (obj!= null && obj instanceof Boolean){
                this.onAllPages = (Boolean)obj;
            }    
        }
        if (soapObject.hasProperty("onLastPage"))
        {	
	        java.lang.Object obj = soapObject.getProperty("onLastPage");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class))
            {
                SoapPrimitive j =(SoapPrimitive) obj;
                if(j.toString()!=null)
                {
                    this.onLastPage = new Boolean(j.toString());
                }
	        }
	        else if (obj!= null && obj instanceof Boolean){
                this.onLastPage = (Boolean)obj;
            }    
        }
        if (soapObject.hasProperty("onPage"))
        {	
	        java.lang.Object obj = soapObject.getProperty("onPage");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class))
            {
                SoapPrimitive j =(SoapPrimitive) obj;
                if(j.toString()!=null)
                {
                    this.onPage = Integer.parseInt(j.toString());
                }
	        }
	        else if (obj!= null && obj instanceof Integer){
                this.onPage = (Integer)obj;
            }    
        }
        if (soapObject.hasProperty("pageOffset"))
        {	
	        java.lang.Object obj = soapObject.getProperty("pageOffset");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class))
            {
                SoapPrimitive j =(SoapPrimitive) obj;
                if(j.toString()!=null)
                {
                    this.pageOffset = Integer.parseInt(j.toString());
                }
	        }
	        else if (obj!= null && obj instanceof Integer){
                this.pageOffset = (Integer)obj;
            }    
        }
        if (soapObject.hasProperty("rotate"))
        {	
	        java.lang.Object obj = soapObject.getProperty("rotate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class))
            {
                SoapPrimitive j =(SoapPrimitive) obj;
                if(j.toString()!=null)
                {
                    this.rotate = Integer.parseInt(j.toString());
                }
	        }
	        else if (obj!= null && obj instanceof Integer){
                this.rotate = (Integer)obj;
            }    
        }
        if (soapObject.hasProperty("signatureVisible"))
        {	
	        java.lang.Object obj = soapObject.getProperty("signatureVisible");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class))
            {
                SoapPrimitive j =(SoapPrimitive) obj;
                if(j.toString()!=null)
                {
                    this.signatureVisible = new Boolean(j.toString());
                }
	        }
	        else if (obj!= null && obj instanceof Boolean){
                this.signatureVisible = (Boolean)obj;
            }    
        }
        if (soapObject.hasProperty("width"))
        {	
	        java.lang.Object obj = soapObject.getProperty("width");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class))
            {
                SoapPrimitive j =(SoapPrimitive) obj;
                if(j.toString()!=null)
                {
                    this.width = Integer.parseInt(j.toString());
                }
	        }
	        else if (obj!= null && obj instanceof Integer){
                this.width = (Integer)obj;
            }    
        }


    }

    @Override
    public java.lang.Object getProperty(int propertyIndex) {
        //!!!!! If you have a compilation error here then you are using old version of ksoap2 library. Please upgrade to the latest version.
        //!!!!! You can find a correct version in Lib folder from generated zip file!!!!!
        if(propertyIndex==0)
        {
            return this.attachmentName!=null?this.attachmentName:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==1)
        {
            return autoSize;
        }
        if(propertyIndex==2)
        {
            return height;
        }
        if(propertyIndex==3)
        {
            return this.imageTokenText!=null?this.imageTokenText:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==4)
        {
            return offsetX;
        }
        if(propertyIndex==5)
        {
            return offsetY;
        }
        if(propertyIndex==6)
        {
            return onAllPages;
        }
        if(propertyIndex==7)
        {
            return onLastPage;
        }
        if(propertyIndex==8)
        {
            return onPage;
        }
        if(propertyIndex==9)
        {
            return pageOffset;
        }
        if(propertyIndex==10)
        {
            return rotate;
        }
        if(propertyIndex==11)
        {
            return signatureVisible;
        }
        if(propertyIndex==12)
        {
            return width;
        }
        return null;
    }


    @Override
    public int getPropertyCount() {
        return 13;
    }

    @Override
    public void getPropertyInfo(int propertyIndex, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info)
    {
        if(propertyIndex==0)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "attachmentName";
            info.namespace= "http://schemas.datacontract.org/2004/07/SealSignBSSTypes";
        }
        if(propertyIndex==1)
        {
            info.type = PropertyInfo.BOOLEAN_CLASS;
            info.name = "autoSize";
            info.namespace= "http://schemas.datacontract.org/2004/07/SealSignBSSTypes";
        }
        if(propertyIndex==2)
        {
            info.type = PropertyInfo.INTEGER_CLASS;
            info.name = "height";
            info.namespace= "http://schemas.datacontract.org/2004/07/SealSignBSSTypes";
        }
        if(propertyIndex==3)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "imageTokenText";
            info.namespace= "http://schemas.datacontract.org/2004/07/SealSignBSSTypes";
        }
        if(propertyIndex==4)
        {
            info.type = PropertyInfo.INTEGER_CLASS;
            info.name = "offsetX";
            info.namespace= "http://schemas.datacontract.org/2004/07/SealSignBSSTypes";
        }
        if(propertyIndex==5)
        {
            info.type = PropertyInfo.INTEGER_CLASS;
            info.name = "offsetY";
            info.namespace= "http://schemas.datacontract.org/2004/07/SealSignBSSTypes";
        }
        if(propertyIndex==6)
        {
            info.type = PropertyInfo.BOOLEAN_CLASS;
            info.name = "onAllPages";
            info.namespace= "http://schemas.datacontract.org/2004/07/SealSignBSSTypes";
        }
        if(propertyIndex==7)
        {
            info.type = PropertyInfo.BOOLEAN_CLASS;
            info.name = "onLastPage";
            info.namespace= "http://schemas.datacontract.org/2004/07/SealSignBSSTypes";
        }
        if(propertyIndex==8)
        {
            info.type = PropertyInfo.INTEGER_CLASS;
            info.name = "onPage";
            info.namespace= "http://schemas.datacontract.org/2004/07/SealSignBSSTypes";
        }
        if(propertyIndex==9)
        {
            info.type = PropertyInfo.INTEGER_CLASS;
            info.name = "pageOffset";
            info.namespace= "http://schemas.datacontract.org/2004/07/SealSignBSSTypes";
        }
        if(propertyIndex==10)
        {
            info.type = PropertyInfo.INTEGER_CLASS;
            info.name = "rotate";
            info.namespace= "http://schemas.datacontract.org/2004/07/SealSignBSSTypes";
        }
        if(propertyIndex==11)
        {
            info.type = PropertyInfo.BOOLEAN_CLASS;
            info.name = "signatureVisible";
            info.namespace= "http://schemas.datacontract.org/2004/07/SealSignBSSTypes";
        }
        if(propertyIndex==12)
        {
            info.type = PropertyInfo.INTEGER_CLASS;
            info.name = "width";
            info.namespace= "http://schemas.datacontract.org/2004/07/SealSignBSSTypes";
        }
    }
    
    @Override
    public void setProperty(int arg0, java.lang.Object arg1)
    {
    }

    @Override
    public String getInnerText() {
        return null;
    }

    @Override
    public void setInnerText(String s) {

    }
}
